<?php
/**
 * System generated by SysGen (System Generator with Formdin Framework) 
 * Download SysGen: https://github.com/bjverde/sysgen
 * Download Formdin Framework: https://github.com/bjverde/formDin
 * 
 * SysGen  Version: 1.9.0-alpha
 * FormDin Version: 4.7.5
 * 
 * System appev2 created in: 2019-09-10 09:04:46
 */

namespace api_controllers;

use DateTime;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Message\ResponseInterface as Response;
use Firebase\JWT\JWT;

class AcessoAPI
{

    public function __construct()
    {
    }


    //--------------------------------------------------------------------------------
    private static function getParam(string $paramName, array $bodyRequest)
    {
        if( \ArrayHelper::has($paramName,$bodyRequest)){
            $paramName = $bodyRequest[$paramName];
        }else{
            throw new \InvalidArgumentException('Parametro '.$paramName.' nÃ£o informado');
        }
        return $paramName;
    }

    //--------------------------------------------------------------------------------
    private static function genToken(string $login_user)
    {
        $controller = new \Acesso_user();
        $user = $controller->selectByLogin($login_user);

        $expireDate = (new DateTime())->modify('+1 days')->format('Y-m-d H:i:s');
        $tokenPayload = [
            'sub' => $user['IDUSER'][0],
            'name' => $user['LOGIN_USER'][0],
            'expired_at' => $expireDate
        ];

        $token = JWT::encode($tokenPayload, getenv('JWT_SECRET_KEY'));

        $refreshTokenPayload = [
            'name' => $user['LOGIN_USER'][0],
            'ramdom' => uniqid()
        ];
        $refreshToken = JWT::encode($refreshTokenPayload, getenv('JWT_SECRET_KEY'));        

        $vo = new \Acesso_tokensVO();
        $vo->setIduser($user['IDUSER'][0]);
        $vo->setToken($token);
        $vo->setRefresh_token($refreshToken);
        $vo->setExpired_at($expireDate);
        $vo->setActive('Y');
        $controller = new \Acesso_tokens;
        $controller->save($vo);

        $result = array();
        $result['token']=$token;
        $result['refreshToken']=$refreshToken;

        return $result;
    }

    //--------------------------------------------------------------------------------
    public static function login(Request $request, Response $response, array $args)
    {
        $bodyRequest = json_decode($request->getBody(),true);

        $login_user = self::getParam('login_user',$bodyRequest);
        $pwd_user   = self::getParam('pwd_user',$bodyRequest);

        $controller = new \Acesso;
        $msg = $controller->login($login_user,$pwd_user);
        $response = $response->withJson($msg);
        if($msg == true){
            $token = self::genToken($login_user);
            $response = $response->withJson([
                "token" => $token['token'],
                "refresh_token" => $token['refreshToken']
            ]);
        }else{
            $response = $response->withJson($msg,401); //401 Unauthorized  https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Status/401
        }
        return $response;
    }

    //--------------------------------------------------------------------------------
    public function refreshToken(Request $request, Response $response, array $args): Response
    {
        $data = $request->getParsedBody();
        $refreshToken = $data['refresh_token'];
        $expireDate = $data['expire_date'];

        $refreshTokenDecoded = JWT::decode(
            $refreshToken,
            getenv('JWT_SECRET_KEY'),
            ['HS256']
        );

        $controller = new \Acesso_tokens;
        $refreshTokenExists = $controller->verifyRefreshToken($refreshToken);
        if(!$refreshTokenExists){
            return $response->withStatus(401);
        }
        
        $usuariosDAO = new UsuariosDAO();
        $usuario = $usuariosDAO->getUserByEmail($refreshTokenDecoded->email);
        if(is_null($usuario))
            return $response->withStatus(401);

        $tokenPayload = [
            'sub' => $usuario->getId(),
            'name' => $usuario->getNome(),
            'email' => $usuario->getEmail(),
            'expired_at' => $expireDate
        ];

        $token = JWT::encode($tokenPayload, getenv('JWT_SECRET_KEY'));
        $refreshTokenPayload = [
            'email' => $usuario->getEmail(),
            'ramdom' => uniqid()
        ];
        $refreshToken = JWT::encode($refreshTokenPayload, getenv('JWT_SECRET_KEY'));

        $tokenModel = new TokenModel();
        $tokenModel->setExpired_at($expireDate)
            ->setRefresh_token($refreshToken)
            ->setToken($token)
            ->setUsuarios_id($usuario->getId());

        $tokensDAO = new TokensDAO();
        $tokensDAO->createToken($tokenModel);

        $response = $response->withJson([
            "token" => $token,
            "refresh_token" => $refreshToken
        ]);

        return $response;
    }
}
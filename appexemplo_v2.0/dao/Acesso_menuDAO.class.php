<?php
/**
 * System generated by SysGen (System Generator with Formdin Framework) 
 * Download SysGen: https://github.com/bjverde/sysgen
 * Download Formdin Framework: https://github.com/bjverde/formDin
 * 
 * SysGen  Version: 1.9.0-alpha
 * FormDin Version: 4.7.5
 * 
 * System appev2 created in: 2019-09-10 09:04:46
 */
class Acesso_menuDAO 
{

    private static $sqlBasicSelect = 'select
                                      idmenu
                                     ,nom_menu
                                     ,idmenu_pai
                                     ,url
                                     ,tooltip
                                     ,img_menu
                                     ,imgdisabled
                                     ,disabled
                                     ,hotkey
                                     ,boolseparator
                                     ,jsonparams
                                     ,sit_ativo
                                     ,dat_inclusao
                                     ,dat_update
                                     from form_exemplo.acesso_menu ';

    private $tpdo = null;

    public function __construct($tpdo=null) {

        $this->validateObjType($tpdo);
        if( empty($tpdo) ){
            $tpdo = New TPDOConnectionObj();
        }
        $this->setTPDOConnection($tpdo);
    }
    public function getTPDOConnection()
    {
        return $this->tpdo;
    }
    public function setTPDOConnection($tpdo)
    {
        $this->validateObjType($tpdo);
        $this->tpdo = $tpdo;
    }
    public function validateObjType($tpdo)
    {
        $typeObjWrong = !($tpdo instanceof TPDOConnectionObj);
        if( !is_null($tpdo) && $typeObjWrong ){
            throw new InvalidArgumentException('class:'.__METHOD__);
        }
    }
    private function processWhereGridParameters( $whereGrid )
    {
        $result = $whereGrid;
        if ( is_array($whereGrid) ){
            $where = ' 1=1 ';
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'IDMENU', SqlHelper::SQL_TYPE_NUMERIC);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'NOM_MENU', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'IDMENU_PAI', SqlHelper::SQL_TYPE_NUMERIC);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'URL', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'TOOLTIP', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'IMG_MENU', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'IMGDISABLED', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'DISABLED', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'HOTKEY', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'BOOLSEPARATOR', SqlHelper::SQL_TYPE_NUMERIC);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'JSONPARAMS', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'SIT_ATIVO', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'DAT_INCLUSAO', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $where = SqlHelper::getAtributeWhereGridParameters($where, $whereGrid, 'DAT_UPDATE', SqlHelper::SQL_TYPE_TEXT_LIKE);
            $result = $where;
        }
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function selectById( $id )
    {
        if( empty($id) || !is_numeric($id) ){
            throw new InvalidArgumentException(Message::TYPE_NOT_INT.'class:'.__METHOD__);
        }
        $values = array($id);
        $sql = self::$sqlBasicSelect.' where idmenu = ?';
        $result = $this->tpdo->executeSql($sql, $values);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function selectCount( $where=null )
    {
        $where = $this->processWhereGridParameters($where);
        $sql = 'select count(idmenu) as qtd from form_exemplo.acesso_menu';
        $sql = $sql.( ($where)? ' where '.$where:'');
        $result = $this->tpdo->executeSql($sql);
        return $result['QTD'][0];
    }
    //--------------------------------------------------------------------------------
    public function selectAllPagination( $orderBy=null, $where=null, $page=null,  $rowsPerPage= null )
    {
        $rowStart = SqlHelper::getRowStart($page,$rowsPerPage);
        $where = $this->processWhereGridParameters($where);

        $sql = self::$sqlBasicSelect
        .( ($where)? ' where '.$where:'')
        .( ($orderBy) ? ' order by '.$orderBy:'')
        .( ' LIMIT '.$rowStart.','.$rowsPerPage);

        $result = $this->tpdo->executeSql($sql);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function selectAll( $orderBy=null, $where=null )
    {
        $where = $this->processWhereGridParameters($where);
        $sql = self::$sqlBasicSelect
        .( ($where)? ' where '.$where:'')
        .( ($orderBy) ? ' order by '.$orderBy:'');

        $result = $this->tpdo->executeSql($sql);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function selectMenuByLogin( $login_user )
    {
        $values = array($login_user);
        $sql = 'select
				 m.idmenu
				,m.idmenu_pai
				,m.nom_menu
				,m.url
				,m.tooltip
				,m.img_menu
				,m.imgdisabled
				,m.disabled
				,m.hotkey
				,m.boolseparator
				,m.jsonparams
				,m.sit_ativo
				,m.dat_inclusao
				,m.dat_update
				from acesso_menu as m
					,vw_acesso_user_menu as um
				where um.idmenu = m.idmenu
				AND um.login_user = ?';
        $result = $this->tpdo->executeSql($sql, $values);
        return $result;
    }    
    //--------------------------------------------------------------------------------
    public function insert( Acesso_menuVO $objVo )
    {
        $values = array(  $objVo->getNom_menu() 
                        , $objVo->getIdmenu_pai() 
                        , $objVo->getUrl() 
                        , $objVo->getTooltip() 
                        , $objVo->getImg_menu() 
                        , $objVo->getImgdisabled() 
                        , $objVo->getDisabled() 
                        , $objVo->getHotkey() 
                        , $objVo->getBoolseparator() 
                        , $objVo->getJsonparams() 
                        , $objVo->getSit_ativo() 
                        , $objVo->getDat_inclusao()
                        );
        $sql = 'insert into form_exemplo.acesso_menu(
                                 nom_menu
                                ,idmenu_pai
                                ,url
                                ,tooltip
                                ,img_menu
                                ,imgdisabled
                                ,disabled
                                ,hotkey
                                ,boolseparator
                                ,jsonparams
                                ,sit_ativo
                                ,dat_inclusao
                                ,dat_update
                                ) values (?,?,?,?,?,?,?,?,?,?,?,?)';
        $result = $this->tpdo->executeSql($sql, $values);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function update ( Acesso_menuVO $objVo )
    {
        $values = array( $objVo->getNom_menu()
                        ,$objVo->getIdmenu_pai()
                        ,$objVo->getUrl()
                        ,$objVo->getTooltip()
                        ,$objVo->getImg_menu()
                        ,$objVo->getImgdisabled()
                        ,$objVo->getDisabled()
                        ,$objVo->getHotkey()
                        ,$objVo->getBoolseparator()
                        ,$objVo->getJsonparams()
                        ,$objVo->getSit_ativo()
                        ,$objVo->getIdmenu() );
        $sql = 'update form_exemplo.acesso_menu set 
                                 nom_menu = ?
                                ,idmenu_pai = ?
                                ,url = ?
                                ,tooltip = ?
                                ,img_menu = ?
                                ,imgdisabled = ?
                                ,disabled = ?
                                ,hotkey = ?
                                ,boolseparator = ?
                                ,jsonparams = ?
                                ,sit_ativo = ?
                                where idmenu = ?';
        $result = $this->tpdo->executeSql($sql, $values);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function delete( $id )
    {
        if( empty($id) || !is_numeric($id) ){
            throw new InvalidArgumentException(Message::TYPE_NOT_INT.'class:'.__METHOD__);
        }
        $values = array($id);
        $sql = 'delete from form_exemplo.acesso_menu where idmenu = ?';
        $result = $this->tpdo->executeSql($sql, $values);
        return $result;
    }
    //--------------------------------------------------------------------------------
    public function getVoById( $id )
    {
        if( empty($id) || !is_numeric($id) ){
            throw new InvalidArgumentException(Message::TYPE_NOT_INT.'class:'.__METHOD__);
        }
        $result = $this->selectById( $id );
        $result = \ArrayHelper::convertArrayFormDin2Pdo($result,false);
        $result = $result[0];
        $vo = new Acesso_menuVO();
        $vo = \FormDinHelper::setPropertyVo($result,$vo);
        return $vo;
    }
}
?>